(define (domain warehouse)
	(:requirements :typing)
	(:types robot pallette - bigobject
        	location shipment order saleitem)

  	(:predicates
    	(ships ?s - shipment ?o - order)
    	(orders ?o - order ?si - saleitem)
    	(unstarted ?s - shipment)
    	(started ?s - shipment)
    	(complete ?s - shipment)
    	(includes ?s - shipment ?si - saleitem)

    	(free ?r - robot)
    	(has ?r - robot ?p - pallette)

    	(packing-location ?l - location)
    	(packing-at ?s - shipment ?l - location)
    	(available ?l - location)
    	(connected ?l - location ?l - location)
    	(at ?bo - bigobject ?l - location)
    	(no-robot ?l - location)
    	(no-pallette ?l - location)

    	(contains ?p - pallette ?si - saleitem)
  )

   (:action startShipment
      :parameters (?s - shipment ?o - order ?l - location)
      :precondition (and (unstarted ?s) 
      (not (complete ?s)) 
      (ships ?s ?o) 
      (available ?l) 
      (packing-location ?l))
      :effect (and (started ?s) 
      (packing-at ?s ?l) 
      (not (unstarted ?s)) 
      (not (available ?l)))
   )
   
   (:action robotMove
      :parameters (?robot - robot ?from - location ?to - location)
      :precondition (and (at ?robot ?from) 
      (connected ?from ?to) 
      (not (at ?robot ?to)) 
      (no-robot ?to))
      :effect (and (not(at ?robot ?from)) 
      (at ?robot ?to) 
      (no-robot ?from) 
      (not (no-robot ?to)) )
   )

   (:action robotMoveWithPallette
      :parameters (?robot - robot ?p - pallette ?from - location ?to - location)
      :precondition (and (at ?p ?from) 
      (at ?robot ?from) 
      (connected ?from ?to) 
      (free ?robot) 
      (not (at ?robot ?to)) 
      (not (at ?p ?to)) 
      (no-robot ?to) 
      (no-pallette ?to))
      :effect (and (not(at ?robot ?from)) 
      (at ?robot ?to) 
      (not (no-pallette ?to)) 
      (not (no-robot ?to)) 
      (not(at ?p ?from)) 
      (at ?p ?to) 
      (has ?robot ?p) 
      (no-robot ?from) 
      (no-pallette ?from))
   )
   
   (:action moveItemFromPalletteToShipment
      :parameters (?p - pallette ?loc - location ?s - shipment ?item - saleitem ?o - order)
      :precondition (and (orders ?o ?item) 
      (ships ?s ?o) 
      (started ?s) 
      (packing-at ?s ?loc) 
      (packing-location ?loc) 
      (contains ?p ?item) 
      (at ?p ?loc))
      :effect (and (includes ?s ?item) (not (contains ?p ?item)))
   )
   
   (:action completeShipment
      :parameters (?s - shipment ?o - order ?l - location)
      :precondition (and (started ?s) 
      (not (complete ?s)) 
      (ships ?s ?o) 
      (not (available ?l)) 
      (packing-location ?l) 
      (packing-at ?s ?l))
      :effect (and (complete ?s) 
      (not (started ?s)) 
      (available ?l) 
      (not (packing-at ?s ?l)))
   )
)
